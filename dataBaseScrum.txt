USE scrum;

-- Tabla ScrumTeam
CREATE TABLE ScrumTeam (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL, 
    description VARCHAR(255)	
);

-- Tabla Backlog
CREATE TABLE Backlog (
  id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  description VARCHAR(255) NOT NULL,
  idScrumTeam INT NOT NULL,
  FOREIGN KEY (idScrumTeam) REFERENCES ScrumTeam (id),
  PRIMARY KEY (id)
);

-- Tabla Sprint
CREATE TABLE Sprint (
  id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  description VARCHAR(255) NOT NULL,
  startDate DATE NOT NULL,
  endDate DATE NOT NULL,
  PRIMARY KEY (id),
  idScrumTeam INT NOT NULL,
  FOREIGN KEY (idScrumTeam) REFERENCES ScrumTeam (id)
);

-- Tabla Devs
CREATE TABLE Developer (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(255) NOT NULL,
    rol ENUM('Developer', 'ScrumMaster', 'ProductOwner') NOT NULL,
    idScrumTeam INT NOT NULL,
    FOREIGN KEY (idScrumTeam) REFERENCES ScrumTeam (id)
);

-- Tabla Task
CREATE TABLE Task (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    priority INT NOT NULL,
    estimatedTime INT NOT NULL,
    status ENUM('pending', 'in_progress', 'completed') NOT NULL,
    idBacklog INT,
    idSprint INT,
    idDeveloper INT,
    idScrumTeam INT NOT NULL,
    FOREIGN KEY (idScrumTeam) REFERENCES ScrumTeam (id),
    FOREIGN KEY (idBacklog) REFERENCES Backlog (id),
    FOREIGN KEY (idSprint) REFERENCES Sprint (id),
    FOREIGN KEY (idDeveloper) REFERENCES Developer (id)
);

ALTER TABLE Task
ADD CONSTRAINT task_backlog_or_sprint_fk
CHECK (idBacklog IS NOT NULL OR idSprint IS NOT NULL);